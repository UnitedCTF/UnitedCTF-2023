from Crypto.Util.number import inverse, long_to_bytes
import gmpy2

# Given parameters from the challenge
n1 = 54480211672318529261153737241124035909405101302574005959419904185222248701151580652707671645279203400268250230850163373439999964654951210831576161822801074258720709980982470969180223732290113077134400609498948804326517040971517807443980711683259961591714363583442680847697668518057560976362369259216420298403
n2 = 79382046464035940928644258582437766071470914181474425319211449180490173805795597095440054550108248272037290249573436385360342167379959811479161881876742176484736522996587026402732941596472990990289448382779421834570297876513900625037542798016936828602732299904413831180969316730354734634154066823621537653891
n3 = 131589491776947758958467592466915216674048211257187114474753725558999666809235578734561335457854072350593976835987917502308359338941227671362126329183956008051170900960406428487888159547194071559114213486260052310509275517428526522308881260964985238126236714133674530571333238981213723015011052845742132037563
e = 3
ciphertext1 = 199928678335129521534816117251372004243631951572839401449003279903518834100069571091320968982602868709474615401880863345470748243593464697149581
ciphertext2 = 199928678335129521534816117251372004243631951572839401449003279903518834100069571091320968982602868709474615401880863345470748243593464697149581
ciphertext3 = 199928678335129521534816117251372004243631951572839401449003279903518834100069571091320968982602868709474615401880863345470748243593464697149581

# Computing N values for CRT
N = n1 * n2 * n3
N1 = N // n1
N2 = N // n2
N3 = N // n3

# Inverse calculations using gmpy2's invert function
u1 = gmpy2.invert(N1, n1)
u2 = gmpy2.invert(N2, n2)
u3 = gmpy2.invert(N3, n3)

# Combined value (M^3 mod N where M is the original message)
result_cubed = (ciphertext1 * N1 * u1 + ciphertext2 * N2 * u2 + ciphertext3 * N3 * u3) % N

# Computing cube root
plaintext_as_number, exact = gmpy2.iroot(result_cubed, 3)

if not exact:
    raise ValueError("Couldn't compute the exact cube root!")

# Convert the integer message back into bytes
flag_bytes = long_to_bytes(plaintext_as_number)

# Convert the bytes into a string
flag = flag_bytes.decode()

print("Decrypted flag:", flag)
